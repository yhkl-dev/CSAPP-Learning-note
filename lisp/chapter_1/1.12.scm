(define (pascal-row n)
	(define (next-row lst)
		(if (= (length lst) 1)
				(list (car lst) (car lst))
  			(let ((ret (next-row (cdr lst)))
							(first (car lst)))
					(cons first (cons (+ first (car ret)) (cdr ret))))))
	(if (<= n 1)
			(list 1)
			(next-row (pascal-row (- n 1))))
	)

(define (for-loop n last op)
	(cond ((<= n last)
				 (op n)
				 (for-loop (+ n 1) last op))))

(define (print-pascal-triangle n)
	(define (print-pascal-row x)
		(displayln (pascal-row x)))
	(for-loop 1 n print-pascal-row))

